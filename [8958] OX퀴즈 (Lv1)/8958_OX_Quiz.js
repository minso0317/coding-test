const fs = require("fs");
const input = fs.readFileSync("./input.txt").toString().trim().split("\n"); // // input.txt 파일을 읽고 문자열로 변환한 뒤, 줄바꿈 기준으로 나눠 배열로 만듦

const testCaseCount = Number(input[0]); // 첫 번째 줄은 테이스 케이스의 개수, 문자열을 숫자로 바꿔 저장

const testCases = input.slice(1);
// 두 번째 줄부터는 OX 문자열이므로 input 배열에서 1번 인덱스부터 끝까지 복사
// slice는 원본(input)은 안건드리고 새로운 배열 생성
// input.txt의 여러 줄 입력을 배열로 나누는 메서드

for (let i = 0; i < testCaseCount; i++) {
  const quiz = testCases[i]; // 현재 테스트 케이스 문자열을 가져옴
  let score = 0; // 총 점수를 누적해서 저장할 변수(초기값 0)
  let streak = 0; // 연속된 'O'의 개수를 저장할 변수(초기값 0)
  for (let j = 0; j < quiz.length; j++) {
    if (quiz[j] === "O") {
      // 현재 문자가 'O'일 때, 그렇지 않으면 "X"이므로 else문 동작
      streak += 1; // 연속된 0의 개수 추가
      score += streak; // 현재 연속된 'O'만큼 점수 추가
    } else {
      streak = 0; // 현재 문자가 'X'이면 streak = 0으로 초기화
    }
  }

  console.log(score); // 최종 점수 출력
}

/**
 * 이 OX퀴즈 문제는 기초 반복문 문제 중에서도 연속성(누적 조건)을 처리하는 문제
 *
 * 문제 유형
 * - 주어진 조건을 코드로 그대로 구현하는 능력
 * - 반복문으로 문자열을 순회하면서 연속되는 O를 체크
 * - 조건문으로 'O'일 때만 연속 점수 처리, 'X'면 초기화
 * - 연속된 'O'를 카운트해서 점수에 누적
 */

/**
 * 문제 핵심
 * 1. 연속성 있는 조건을 누적 처리하는 로직
 * - O가 연속되면 점수는 점점 증가함 (1, 2, 3,...)
 * - X가 나오면 그 연속은 끊낌
 *
 * 2. 상태를 유지하면서 순회하는 루프
 * - 문자열을 한 글자씩 순회하면서 상태를 업데이트해야 함
 * - for 문 안에서 현재 글자에 따라 다른 상태 처리 (if (quiz[j] === 'O'))
 */

/**
 * 비슷한 문제
 * 문자열 분석 (백준 10809)	// 알파벳 처음 등장 위치 찾기
 * 카운트와 조건 누적 (백준 11720) // 숫자합 구하기
 * 연속합 (백준 1912) // 연속된 수 중 가장 큰 합(난이도 상)
 */
